x
hist(x$x, breaks=6)
hist(x$x)
head(train)
x = aggregate(train$Weekly_Sales, list(train$IsHoliday), mean)
x
x = aggregate(train$Weekly_Sales, list(train$Type), mean)
x
hist(x$x)
backsolve(x$x)
barplot(x$x)
x = aggregate(train$Weekly_Sales, list(train$Size), mean)
x
barplot(x$x)
hist(x$x)
hist(x$x, breaks=10)
head(train)
plot (train$Temperature, train$Weekly_Sales)
plot (train$Temperature, train$Weekly_Sales, type='l')
plot (train$Temperature, train$Weekly_Sales)
rm(list=ls(all=TRUE))
swirl()
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 = c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
myVector <- c(1:20)
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4, 5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix
myMatrix2 <- matrix (1:20, nrow=4, ncol=5)
identical(myMatrix, myMatrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(myData) <- cnames
myData
source('C:/rwork/ds-rprog/ass-1-1.R')
source('C:/rwork/ds-rprog/ass-1-1.R')
source('~/.active-rstudio-document')
source('C:/rwork/ds-rprog/ass-1-1.R')
source('C:/rwork/ds-rprog/ass-1-1.R')
sprintf("name_%03d", 1)
source('C:/rwork/ds-rprog/ass-1-1.R')
data
obs = c()
bbs
bbs
obs
data$sulfate
source('C:/rwork/ds-rprog/ass-1-1.R')
data
data$nitrate
head(data)
class(data)
attributes(data)
source('C:/rwork/ds-rprog/ass-1-1.R')
tmp = read.csv(file="C:\\rwork\\ds-rprog\\specdata\\001.csv", header=TRUE)
class(tmp)
tmp$sulfate
source('C:/rwork/ds-rprog/ass-1-1.R')
dat
data
data$sulfate
source('C:/rwork/ds-rprog/ass-1-1.R')
data[[1]]
class(data[[1]])
m1 = data[[1]]
m1[!is.na(m1$sulfate), "sulfate"]
class(m1[!is.na(m1$sulfate), "sulfate"])
source('C:/rwork/ds-rprog/ass-1-1.R')
data
source('C:/rwork/ds-rprog/ass-1-1.R')
data
source('~/.active-rstudio-document')
data
source('C:/rwork/ds-rprog/ass-1-1.R')
source('~/.active-rstudio-document')
source('C:/rwork/ds-rprog/ass-1-1.R')
pollutantmean("specdata", "nitrate", 23)
pollutantmean("specdata", "nitrate", 1:23)
pollutantmean("C:\\rwork\\ds-rprog\\specdata", "nitrate", 1:23)
pollutantmean("C:\\rwork\\ds-rprog\\specdata", "nitrate", 23)
pollutantmean("C:\\rwork\\ds-rprog\\specdata", "nitrate", 23)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
# read csv file into list of data frames mon.data
mon.data = list()
for (mon.id in id) {
fname = paste(directory, "\\", sprintf("%03d", mon.id), ".csv", sep="")
mon.data[[mon.id]] = read.csv(file=fname, header=TRUE)
}
#calculate mean
obs = c()
for (data in mon.data) {
obs = c(obs, data[!is.na(data$sulfate), "sulfate"])
}
print (paste ("num. of obs: ", length(obs)))
mean(obs)
}
pollutantmean("C:\\rwork\\ds-rprog\\specdata", "nitrate", 23)
"sulfate", 1:10
pollutantmean("C:\\rwork\\ds-rprog\\specdata", "sulfate", 1:10)
pollutantmean("C:\\rwork\\ds-rprog\\specdata", "nitrate", 70:72)
use warnings()
warnings()
tmp = read.csv("C:\\rwork\\ds-rprog\\specdata\023.csv", header=TRUE)
tmp = read.csv("C:\\rwork\\ds-rprog\\specdata\\023.csv", header=TRUE)
tmp
class(tmp)
is.na(tmp$nitrate)
!is.na(tmp$nitrate)
pm = "nitrate"
is.na(tmp$pm)
is.na(tmp[, pm])
tmp[is.na(tmp[, pm]), pm]
tmp[!is.na(tmp[, pm]), pm]
pollutantmean("C:\\rwork\\ds-rprog\\specdata", "nitrate", 23)
source("ds-rprog/ass-1-1.R")
pollutantmean("C:\\rwork\\ds-rprog\\specdata", "nitrate", 23)
source("ds-rprog/ass-1-1.R")
pollutantmean("C:\\rwork\\ds-rprog\\specdata", "nitrate", 23)
warnings()
tmp
tmp = read.csv("C:\\rwork\\ds-rprog\\specdata\\023.csv", header=TRUE)
tmp[is.na(tmp[, pm]), pm]
pm = "nitrate"
tmp[is.na(tmp[, pm]), pm]
tmp[!is.na(tmp[, pm]), pm]
mean(tmp[!is.na(tmp[, pm]), pm])
pollutantmean("C:\\rwork\\ds-rprog\\specdata", "nitrate", 23)
source("ds-rprog/ass-1-1.R")
pollutantmean("C:\\rwork\\ds-rprog\\specdata", "nitrate", 23)
source("ds-rprog/ass-1-1.R")
pollutantmean("C:\\rwork\\ds-rprog\\specdata", "nitrate", 23)
source("ds-rprog/ass-1-1.R")
pollutantmean("C:\\rwork\\ds-rprog\\specdata", "nitrate", 23)
source("ds-rprog/ass-1-1.R")
pollutantmean("C:\\rwork\\ds-rprog\\specdata", "nitrate", 23)
source("ds-rprog/ass-1-1.R")
pollutantmean("C:\\rwork\\ds-rprog\\specdata", "nitrate", 23)
id  = 23
id
seq_along(id)
for (i in seq_along(id)) {print (i)}
source("ds-rprog/ass-1-1.R")
pollutantmean("C:\\rwork\\ds-rprog\\specdata", "nitrate", 23)
source("ds-rprog/ass-1-1.R")
pollutantmean("C:\\rwork\\ds-rprog\\specdata", "nitrate", 23)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("C:\\rwork\\ds-rprog\\specdata", "nitrate", 70:72)
tmp = read.csv("C:\\rwork\\ds-rprog\\specdata\\023.csv", header=TRUE)
complete.cases(tmp)
tmp[complete.cases(tmp), ]
nrow(tmp[complete.cases(tmp), ])
t = data.frame(id=c(), nobs=c())
t
names(t)
t$id = 1
t = data.frame(colnames=c("id", "nobs"))
t
t = data.frame(col.names=c("id", "nobs"))
t
t = data.frame(id=integer(0), nobs=integer(0)))
t = data.frame(id=integer(0), nobs=integer(0))
t
t[nrow(t)+1, ] = c(1, 2)
t
source('C:/rwork/ds-rprog/complete.R')
complete("ds-rprog/specdata/", 1)
complete("ds-rprog/specdata/", 1)
source('C:/rwork/ds-rprog/complete.R')
source('C:/rwork/ds-rprog/complete.R')
complete("ds-rprog/specdata/", 1)
complete("ds-rprog/specdata/", c(2, 4, 8, 10, 12))
complete("ds-rprog/specdata/", 30:25)
complete("ds-rprog/specdata/", 3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
str(ls)
str(with)
str(setwd)
set.seed(1)
rpois(5, 2)
library (xlsx)
install.packages("xlsxjars")
library (xlsx)
library (xlsx)
library(rJava)
Sys.getenv("JAVA_HOME")
library(rJava)
version
install.packages("RMySQL")
R.home()
install.packages('RMySQL', type="C:/Users//mahmood/Downloads/RMySQL/")
install.packages('RMySQL', type="C:/Users//mahmood/Downloads/RMySQL/")
install.packages('RMySQL', type="C:/Users//mahmood/Downloads/RMySQL/")
install.packages('RMySQL', type="C:/Users//mahmood/Downloads/RMySQL/")
install.packages('RMySQL', type="C:/Users//mahmood/Downloads/RMySQL/")
install.packages('RMySQL', type="C:/Users//mahmood/Downloads/RMySQL/")
library(rtools)
library(Rtools)
installed.packages()
install.packages('RMySQL', type="C:/Users//mahmood/Downloads/RMySQL/")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
install.packages('RMySQL', type="C:/Users//mahmood/Downloads/RMySQL/")
install.packages('RMySQL', type="C:/Users//mahmood/Downloads/RMySQL/")
install.packages('RMySQL', type="C:/Users//mahmood/Downloads/RMySQL/")
install.packages('RMySQL', type="C:/Users//mahmood/Downloads/RMySQL/")
install.packages('RMySQL', type="C:/Users//mahmood/Downloads/RMySQL/")
library("RMySQL")
library(RMySQL)
install.package(RMySQL)
install.packages(RMySQL)
install.packages('RMySQL', type="C:/Users//mahmood/Downloads/RMySQL/")
install.packages('RMySQL', type="C:/Users//mahmood/Downloads/RMySQL/")
install.packages('RMySQL', type="C:/Users//mahmood/Downloads/RMySQL/")
install.packages('RMySQL', type="C:/Users//mahmood/Downloads/RMySQL/")
R.home()
install.package(DBI)
install.packages("DBI")
install.packages('RMySQL', type="C:/Users//mahmood/Downloads/RMySQL/")
install.packages('RMySQL', type="C:/Users//mahmood/Downloads/RMySQL/")
install.packages('RMySQL', type="C:/Users//mahmood/Downloads/RMySQL/")
install.packages('RMySQL', type="C:/Users//mahmood/Downloads/RMySQL/")
install.packages('RMySQL', type="C:/Users//mahmood/Downloads/RMySQL/")
install.packages('RMySQL', type="C:/Users//mahmood/Downloads/RMySQL/")
install.packages("RMySQL", type="C:/Users//mahmood/Downloads/RMySQL/")
library(twitteR)
load("C:/Dropbox/devel/twitter/twitCred.RData")
favorites('muxions', n = 20)
getUser('muxions')
load("C:/Dropbox/devel/twitter/twitCred.RData")
registerTwitterOAuth(twitCred)
getUser('muxions')
source('~/.active-rstudio-document')
library(twitteR)
load("C:/Dropbox/devel/twitter/twitCred.RData")
registerTwitterOAuth(twitCred)
getUser('muxions')
getUser('muxions', oauth=twitCred)
source('C:/Dropbox/devel/twitter/auth.R')
getUser('muxions')
library(twitteR)
load("C:/Dropbox/devel/twitter/twitCred.RData")
getUser('muxions')
library(twitteR)
load("C:/Dropbox/devel/twitter/twitCred.RData")
getUser('muxions')
registerTwitterOAuth(twitCred)
getUser('muxions')
source('C:/Dropbox/devel/twitter/auth.R')
library(twitteR)
load("C:/Dropbox/devel/twitter/twitCred.RData")
getUser('muxions')
registerTwitterOAuth(twitCred)
getUser('muxions')
getUser('muxions', cainfo="cacert.pem")
searchTwitter('#caa2013', cainfo="cacert.pem")
source('C:/Dropbox/devel/twitter/auth.R')
library(twitteR)
load("C:/Dropbox/devel/twitter/twitCred.RData")
registerTwitterOAuth(twitCred)
searchTwitter('#caa2013', cainfo="cacert.pem")
getUser('muxions', cainfo="cacert.pem")
library(twitteR)
load("C:/Dropbox/devel/twitter/twitCred.RData")
registerTwitterOAuth(twitCred)
getUser('muxions', cainfo="cacert.pem")
favorites('muxions', n=2, cainfo="cacert.pem")
tm <- matrix(1:4, 2, 2)
tm
solve(tm)
source('C:/rwork/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
x <- makeCacheMatrix(tm)
x
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
x$set(matrix(sample(1:16), 4, 4 ))
cacheSolve(x)
cacheSolve(x)
x$set(matrix(sample(1:12), 4, 3 ))
cacheSolve(x)
source('C:/rwork/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
x$set(matrix(sample(1:12), 4, 3 ))
cacheSolve(x)
source('C:/rwork/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
x$set(matrix(sample(1:12), 4, 3 ))
cacheSolve(x)
source('C:/rwork/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
x$set(matrix(sample(1:12), 4, 3 ))
cacheSolve(x)
x$set(matrix(sample(1:16), 4, 4 ))
cacheSolve(x)
solve(matrix(sample(1:16), 4, 4 ))
x$set(matrix(1:16, 4, 4 ))
cacheSolve(x)
x$get
x$get()
cacheSolve(x)
source('C:/rwork/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
x$set(matrix(1:16, 4, 4 ))
cacheSolve(x)
x <- makeCacheMatrix(matrix(1:9, 3, 3))
source('C:/rwork/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
x <- makeCacheMatrix(matrix(1:9, 3, 3))
cacheSolve(x)
source('C:/rwork/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
x$getSolve()
x <- makeCacheMatrix(matrix(1:16, 4, 4))
cacheSolve(x)
solve(x$get())
x$get()
tm <- x$get()
tm
class(tm)
solve(tm)
tm = matrix (sample(1:16), 4, 4)
tm
solve(tm)
x <- makeCacheMatrix(tm)
cacheSolve(x)
tm = matrix (sample(1:16), 4, 4)
x <- makeCacheMatrix(tm)
source('C:/rwork/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
tm = matrix (sample(1:16), 4, 4)
x <- makeCacheMatrix(tm)
cacheSolve(x)
window()
windows()
jpeg()
jpeg()
getwd()
setwd("coursera-datasci/")
ls
ls()
df <- read.table("data/household_power_consumption.txt", missing="?")
?read.table
df <- read.table("data/household_power_consumption.txt", na.strings=="?")
df <- read.table("data/household_power_consumption.txt", na.strings="?")
nrow(df)
names(df)
df[1, ]
df[2, ]
df <- read.table("data/household_power_consumption.txt", na.strings="?", head=T, sep=";")
names(df)
names(df)
nrow(df)
class(df$Date)
class(df$Time)
df[1, ]
tmp = "17:24:00"
as.Date(tmp)
as.Date("16/12/2006")
colcls = c ('character', 'character', 'numeric',)
rep('numeric', 7)
colcls = c ('character', 'character', rep('numeric', 7))
colcls
df <- read.table("data/household_power_consumption.txt", na.strings="?", head=T, sep=";", colClasses=colcls)
class(df$Date)
df[1,1]
as.Date(df[1,1])
strptime(df[1,1], format('%d/%B/%Y'))
strptime(df[1,1], format('%d/%b/%Y'))
strptime(df[1,1]
)
strptime(df[1,1], format('%d/%b/%Y:%H:%M%S'))
strptime('16/Oct/2005:07:51:00',format='%d/%b/%Y:%H:%M:%S')
strptime('16/Oct/2005',format='%d/%b/%Y')
strptime('16/12/2005',format='%d/%b/%Y')
strptime('16/12/2005',format='%d/%B/%Y')
strptime('16/12/2005',format='%d/%m/%Y')
strptime(df[1,1], format('%d/%m/%Y'))
as.Date(strptime(df[1,1], format('%d/%m/%Y')))
as.Date(strptime(df[1:2,1], format('%d/%m/%Y')))
df$Date <- as.Date(strptime(df$Date, format('%d/%m/%Y')))
class(df$Date)
as.Date(strptime(df[1,2], format('%d/%m/%Y')))
df[1,2]
as.Date(strptime(df[1,2], format('%H/%M/%S')))
as.Date(strptime(df[1,2], format('%H:%M:%S')))
df[1,2]
strptime(df[1,2], format('%H:%M:%S'))
strptime(df[1,2], format(':%H:%M:%S'))
strptime(df[1,2], format('%H:%M:%S'))
df[df$Date == "2007-02-01", ]
head(df[df$Date == "2007-02-01", ])
head(df[df$Date in c("2007-02-01", 2007-02-02), ])
head(df[df$Date  == "2007-02-01" or df$Date  == "2007-02-02", ])
head(df[df$Date  == "2007-02-01" or df$Date  | "2007-02-02", ])
head(df[df$Date  == "2007-02-01" | df$Date  == "2007-02-02", ])
nrow(df[df$Date  == "2007-02-01" | df$Date  == "2007-02-02", ])
df.target <- df[df$Date  == "2007-02-01" | df$Date  == "2007-02-02", ]
tail(df.target)
head (df.target)
hist(df.target$Global_active_power)
hist(df.target$Global_active_power, xlab="Global Active Power", col="red")
?copy2png
png("exploratory-data-analysis/plot1.png", height=480, width=480)
hist(df.target$Global_active_power, xlab="Global Active Power", col="red")
dev.off()
png("exploratory-data-analysis/plot1.png", height=480, width=480)
hist(df.target$Global_active_power, xlab="Global Active Power (kilowatts)", col="red", title="Global Active Power")
hist(df.target$Global_active_power, xlab="Global Active Power (kilowatts)", col="red", title(main="Global Active Power")
))
hist(df.target$Global_active_power, xlab="Global Active Power (kilowatts)", col="red", title=c(main="Global Active Power"))
hist(df.target$Global_active_power, xlab="Global Active Power (kilowatts)", col="red", main="Global Active Power")
png("exploratory-data-analysis/plot1.png", height=480, width=480)
hist(df.target$Global_active_power, xlab="Global Active Power (kilowatts)", col="red")
hist(df.target$Global_active_power, xlab="Global Active Power (kilowatts)", col="red", main="test")
hist(df.target$Global_active_power, xlab="Global Active Power (kilowatts)", col="red", main="Global Active Power")
dev.off()
source('C:/rwork/coursera-datasci/exploratory-data-analysis/quiz1.R')
pvals <- seq(0, 1, length=1000)
?dbinom
pvals
dbinom(3, 4, pvals)
dbinom(3, 4, pvals) / dbinom(3, 4, 3/4)
dbinom(3, 4, 3/4)
sp <- sqrt(9 * 0.6 + 9 * 0.68) / 18
sp
3 - 5 + c(-1, 1) * qt(0.975, 27) * sp * (1/9 + 1/9)^.5
3 - 5 + c(-1, 1) * qt(0.975, 19) * sp * (1/9 + 1/9)^.5
3 - 5 + c(1, -1) * qt(0.975, 19) * sp * (1/9 + 1/9)^.5
sp <- sqrt(0.6 + 0.68) / 19
3 - 5 + c(-1, 1) * qt(0.975, 19) * sp * (1/9 + 1/9)^.5
sp <- sqrt(9 * 0.6 + 9 * 0.68) / 18
5 - 3 + c(-1, 1) * qt(0.975, 19) * sp * (1/9 + 1/9)^.5
sp <- sqrt(99 * 0.5^2 + 99 * 2^2) / 198
sp
6 - 4 + c(-1, 1) * qt(0.975, 199) * sp * (1/99 + 1/99)^.5
6 - 4 + c(1, -1) * qt(0.975, 199) * sp * (1/99 + 1/99)^.5
getpwd()
getwd()
setwd("DevDataProd/")
library(shiny)
runApp()
setwd("course_project/")
runApp()
getwd()
setwd (""C:/Dropbox/datasci-coursera/DevDataProd")
setwd ("C:/Dropbox/datasci-coursera/DevDataProd")
author ("MTPrediction_Deck")
library(slidify)
author ("MTPrediction_Deck")
fit
data(mtcars)
fit <- lm (mpg ~ wt + hp + cyl, data = mtcars)
summary (fit)
summary (fit)$coeff
mt cars
mtcars
newdata <- data.frame (wt = 4, hp = 100, cyl = 6)
fit
predict(fit, newdata, interval="predict")
